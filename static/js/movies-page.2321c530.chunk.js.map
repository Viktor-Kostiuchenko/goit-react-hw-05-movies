{"version":3,"file":"static/js/movies-page.2321c530.chunk.js","mappings":"+LACA,GAAgB,MAAQ,0BAA0B,MAAQ,2B,SCG3C,SAASA,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC/C,OACE,iBAAKC,UAAWC,EAAAA,KAAhB,WACE,gBACED,UAAWC,EAAAA,MACXJ,IAAKA,EAAG,yCAAqCA,GAAQK,EACrDC,IAAKL,EACLM,QAAQ,UAEV,eAAIJ,UAAWC,EAAAA,MAAf,SAAyBH,GAAgBC,OCZ/C,MAA6B,2BAA7B,EAAqE,2BCGtD,SAASM,EAAT,GAA6B,IAAXC,EAAU,EAAVA,OAC/B,OACE,eAAIN,UAAWC,EAAf,SACGK,GACCA,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaX,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,KAA3B,OACT,eAAaC,UAAWC,EAAxB,UACE,SAAC,KAAD,CAAMS,GAAE,kBAAaF,GAArB,UACE,SAACZ,EAAD,CAAYC,IAAKY,EAAaX,MAAOA,EAAOC,KAAMA,OAF7CS,U,kHCNbG,EAAYC,IAAAA,OAAa,CAC7BC,QAAS,+BACTC,QAAS,IAETC,OAAQ,CACNC,QAAS,sCAIN,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kGAEoBP,EAAUO,GAF9B,uBAEKC,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHC,EAAAA,GAAAA,MAAA,yHALG,kF,gICXP,EAA6B,+BAA7B,EAAoE,0BAApE,EAAuG,2B,SCGxF,SAASC,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SACnC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAkBA,OACE,+BACE,kBAAMH,SAdW,SAAAI,GACnBA,EAAIC,iBAEiB,KAAjBH,EAAMI,QAKVN,EAASE,GACTC,EAAS,KALPL,EAAAA,GAAAA,QAAc,cAUgBpB,UAAWC,EAAc4B,aAAa,MAApE,WACE,kBACE7B,UAAWC,EACX6B,KAAK,OACLC,WAAS,EACTC,YAAY,gBACZC,MAAOT,EACPU,SAzBiB,SAAAR,GACvBD,EAASC,EAAIS,cAAcF,MAAMG,mBA0B7B,mBAAQN,KAAK,SAAS9B,UAAWC,EAAjC,qB,wBC7BO,SAASoC,IACtB,OAA0Bd,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOjB,EAAP,KAAegC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAKf,EAAL,CAGA,IAAMgB,EAAU,mCAAG,qGACIvB,EAAAA,EAAAA,GAAY,sBAAD,OAAuBO,IADtC,OACXlB,EADW,OAEjBgC,EAAUhC,GAFO,2CAAH,qDAKhBkC,OACC,CAAChB,IAMJ,OACE,iCACE,SAACH,EAAD,CAAYC,SANK,SAAAE,GACnBC,EAASD,MAMNlB,IAAU,SAACD,EAAA,EAAD,CAAQC,OAAQA,EAAOmC,e","sources":["webpack://goit-react-hw-05-movies/./src/components/Movies/MoviesItem/MoviesItem.module.scss?b7b9","components/Movies/MoviesItem/MoviesItem.jsx","webpack://goit-react-hw-05-movies/./src/components/Movies/Movies.module.scss?f7cd","components/Movies/Movies.jsx","services/moviesApi.js","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.scss?5dd0","components/SearchForm/SearchForm.jsx","views/MoviesPage/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"image\":\"MoviesItem_image__KoNtk\",\"title\":\"MoviesItem_title__Rrsmm\"};","import PropTypes from 'prop-types';\nimport noPoster from '../../../images/no_image_poster.png';\nimport s from './MoviesItem.module.scss';\n\nexport default function MoviesItem({ src, title, name }) {\n  return (\n    <div className={s.card}>\n      <img\n        className={s.image}\n        src={src ? `https://image.tmdb.org/t/p/w500${src}` : noPoster}\n        alt={title}\n        loading=\"lazy\"\n      />\n      <h2 className={s.title}>{title ? title : name}</h2>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"Movies_moviesList__ueqwJ\",\"moviesitem\":\"Movies_moviesitem__5C20G\"};","import { Link } from 'react-router-dom';\nimport MoviesItem from './MoviesItem';\nimport s from './Movies.module.scss';\n\nexport default function Movies({ movies }) {\n  return (\n    <ul className={s.moviesList}>\n      {movies &&\n        movies.map(({ id, poster_path, title, name }) => (\n          <li key={id} className={s.moviesitem}>\n            <Link to={`/movies/${id}`}>\n              <MoviesItem src={poster_path} title={title} name={name} />\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst getMovies = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  timeout: 1000,\n\n  params: {\n    api_key: '0c445e222255734e4e402081285b3802',\n  },\n});\n\nexport async function fetchMovies(q) {\n  try {\n    const { data } = await getMovies(q);\n    return data;\n  } catch (error) {\n    toast.error(`Нет фильмов по запросу`);\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"SearchForm_searchForm__TTC8q\",\"input\":\"SearchForm_input__9cxSu\",\"button\":\"SearchForm_button__mJj5Z\",\"label\":\"SearchForm_label__uBXHG\",\"searchIcon\":\"SearchForm_searchIcon__zmMm3\"};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport s from './SearchForm.module.scss';\n\nexport default function SearchForm({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleNameChange = evt => {\n    setQuery(evt.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (query.trim() === '') {\n      toast.warning('Enter sth');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={s.searchForm} autoComplete=\"off\">\n        <input\n          className={s.input}\n          type=\"text\"\n          autoFocus\n          placeholder=\"Search movies\"\n          value={query}\n          onChange={handleNameChange}\n        />\n        <button type=\"submit\" className={s.button}>\n          {/* <BiSearchAlt className={s.searchIcon} /> */}\n          go\n        </button>\n      </form>\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport SearchForm from '../../components/SearchForm';\nimport Movies from '../../components/Movies';\nimport { fetchMovies } from '../../services/moviesApi';\n\nexport default function MoviesPage() {\n  const [query, setQuery] = useState(null);\n  const [movies, setMovies] = useState(null);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    const asyncFetch = async () => {\n      const movies = await fetchMovies(`search/movie?query=${query}`);\n      setMovies(movies);\n    };\n\n    asyncFetch();\n  }, [query]);\n\n  const onFormSubmit = query => {\n    setQuery(query);\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={onFormSubmit} />\n      {movies && <Movies movies={movies.results} />}\n    </>\n  );\n}\n"],"names":["MoviesItem","src","title","name","className","s","noPoster","alt","loading","Movies","movies","map","id","poster_path","to","getMovies","axios","baseURL","timeout","params","api_key","fetchMovies","q","data","toast","SearchForm","onSubmit","useState","query","setQuery","evt","preventDefault","trim","autoComplete","type","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","MoviesPage","setMovies","useEffect","asyncFetch","results"],"sourceRoot":""}